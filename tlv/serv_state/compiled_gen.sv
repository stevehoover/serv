// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


`include "sandpiper_gen.vh"


genvar cnt_w1, cnt_w4, csr;


//
// Signals declared top-level.
//

// For |default$alu_cmp.
wire DEFAULT_alu_cmp_a0;

// For |default$alu_rd_sel1.
wire DEFAULT_alu_rd_sel1_a0;

// For |default$bne_or_bge.
wire DEFAULT_bne_or_bge_a0;

// For |default$branch_op.
wire DEFAULT_branch_op_a0;

// For |default$bufreg_en_out.
wire DEFAULT_bufreg_en_out_a0;

// For |default$cnt0_out.
wire DEFAULT_cnt0_out_a0;

// For |default$cnt0to3_out.
wire DEFAULT_cnt0to3_out_a0;

// For |default$cnt11_out.
wire DEFAULT_cnt11_out_a0;

// For |default$cnt12_out.
wire DEFAULT_cnt12_out_a0;

// For |default$cnt12to31_out.
wire DEFAULT_cnt12to31_out_a0;

// For |default$cnt1_out.
wire DEFAULT_cnt1_out_a0;

// For |default$cnt2_out.
wire DEFAULT_cnt2_out_a0;

// For |default$cnt3_out.
wire DEFAULT_cnt3_out_a0;

// For |default$cnt7_out.
wire DEFAULT_cnt7_out_a0;

// For |default$cnt_done_out.
wire DEFAULT_cnt_done_out_a0;

// For |default$cnt_r.
wire [3:0] DEFAULT_cnt_r_a0;

// For |default$cond_branch.
wire DEFAULT_cond_branch_a0;

// For |default$ctrl_jump.
wire DEFAULT_ctrl_jump_n1;
reg  DEFAULT_ctrl_jump_a0;

// For |default$ctrl_misalign.
wire DEFAULT_ctrl_misalign_a0;

// For |default$ctrl_pc_en_out.
wire DEFAULT_ctrl_pc_en_out_a0;

// For |default$ctrl_trap_out.
wire DEFAULT_ctrl_trap_out_a0;

// For |default$dbus_ack.
wire DEFAULT_dbus_ack_a0;

// For |default$dbus_cyc_out.
wire DEFAULT_dbus_cyc_out_a0;

// For |default$dbus_en.
wire DEFAULT_dbus_en_a0;

// For |default$e_op.
wire DEFAULT_e_op_a0;

// For |default$ibus_ack.
wire DEFAULT_ibus_ack_a0;

// For |default$ibus_cyc.
wire DEFAULT_ibus_cyc_n1;
reg  DEFAULT_ibus_cyc_a0;

// For |default$ibus_cyc_out.
wire DEFAULT_ibus_cyc_out_a0;

// For |default$init_done.
wire DEFAULT_init_done_n1;
reg  DEFAULT_init_done_a0;

// For |default$init_out.
wire DEFAULT_init_out_a0;

// For |default$last_init.
wire DEFAULT_last_init_a0;

// For |default$mdu_op.
wire DEFAULT_mdu_op_a0;

// For |default$mdu_ready.
wire DEFAULT_mdu_ready_a0;

// For |default$mdu_valid_out.
wire DEFAULT_mdu_valid_out_a0;

// For |default$mem_bytecnt_out.
wire [1:0] DEFAULT_mem_bytecnt_out_a0;

// For |default$mem_misalign.
wire DEFAULT_mem_misalign_a0;

// For |default$misalign_trap_sync.
wire DEFAULT_misalign_trap_sync_a0;

// For |default$new_irq.
wire DEFAULT_new_irq_a0;

// For |default$o_cnt_en.
wire DEFAULT_o_cnt_en_a0;

// For |default$out_cnt.
wire [4:2] DEFAULT_out_cnt_n1;
reg  [4:2] DEFAULT_out_cnt_a0;

// For |default$out_cnt_inc.
wire [2:0] DEFAULT_out_cnt_inc_a0;

// For |default$rd_alu_en.
wire DEFAULT_rd_alu_en_a0;

// For |default$rd_op.
wire DEFAULT_rd_op_a0;

// For |default$reset.
wire DEFAULT_reset_a0;

// For |default$rf_rd_en_out.
wire DEFAULT_rf_rd_en_out_a0;

// For |default$rf_ready.
wire DEFAULT_rf_ready_a0;

// For |default$rf_rreq_out.
wire DEFAULT_rf_rreq_out_a0;

// For |default$rf_wreq_out.
wire DEFAULT_rf_wreq_out_a0;

// For |default$sh_done.
wire DEFAULT_sh_done_a0;

// For |default$sh_right.
wire DEFAULT_sh_right_a0;

// For |default$shift_op.
wire DEFAULT_shift_op_a0;

// For |default$take_branch.
wire DEFAULT_take_branch_a0;

// For |default$trap_pending.
wire DEFAULT_trap_pending_a0;

// For |default$two_stage_op.
wire DEFAULT_two_stage_op_a0;




   //
   // Scope: |default
   //

      // Staging of $ctrl_jump.
      always @(posedge clk) DEFAULT_ctrl_jump_a0 <= DEFAULT_ctrl_jump_n1;

      // Staging of $ibus_cyc.
      always @(posedge clk) DEFAULT_ibus_cyc_a0 <= DEFAULT_ibus_cyc_n1;

      // Staging of $init_done.
      always @(posedge clk) DEFAULT_init_done_a0 <= DEFAULT_init_done_n1;

      // Staging of $out_cnt.
      always @(posedge clk) DEFAULT_out_cnt_a0[4:2] <= DEFAULT_out_cnt_n1[4:2];


      //
      // Scope: /cnt_w1[0:W != 1 ? -1 : 0]
      //
      generate for (cnt_w1 = W != 1 ? -1 : 0; cnt_w1 <= 0; cnt_w1=cnt_w1+1) begin : L1gen_DEFAULT_CntW1
         // Staging of $cnt_lsb.
         always @(posedge clk) L1_DEFAULT_CntW1[cnt_w1].L1_cnt_lsb_a0[3:0] <= L1_DEFAULT_CntW1[cnt_w1].L1_cnt_lsb_n1[3:0];

      end endgenerate

      //
      // Scope: /cnt_w4[0:W != 4 ? -1 : 0]
      //
      generate for (cnt_w4 = W != 4 ? -1 : 0; cnt_w4 <= 0; cnt_w4=cnt_w4+1) begin : L1gen_DEFAULT_CntW4
         // Staging of $cnt_en.
         always @(posedge clk) L1_DEFAULT_CntW4[cnt_w4].L1_cnt_en_a0 <= L1_DEFAULT_CntW4[cnt_w4].L1_cnt_en_n1;

      end endgenerate

      //
      // Scope: /csr[0:!WITH_CSR ? -1 : 0]
      //
      generate for (csr = !WITH_CSR ? -1 : 0; csr <= 0; csr=csr+1) begin : L1gen_DEFAULT_Csr
         // Staging of $misalign_trap_sync_r.
         always @(posedge clk) L1_DEFAULT_Csr[csr].L1_misalign_trap_sync_r_a0 <= L1_DEFAULT_Csr[csr].L1_misalign_trap_sync_r_n1;

      end endgenerate


